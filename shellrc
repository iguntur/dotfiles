#!/bin/bash

##
## Shell Environment and Productivity Tools
## - CLI completions and plugins
## - Developer Tools and service integrations
##

################################################################################
# curl
################################################################################
if cmd_exists brew; then
	export PATH="$(brew --prefix)/opt/curl/bin:$PATH"
fi

################################################################################
# asdf
################################################################################
case "$SHELL_NAME" in
zsh)
	load_source "$HOME/.asdf/asdf.sh"
	;;
esac

################################################################################
# FZF
################################################################################
# Setting fd as the default source for fzf
# Now fzf (w/o pipe) will use fd instead of find
# export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
FD_OPTIONS="--full-path -HI --ignore-file $HOME/.rgignore"
export FZF_DEFAULT_COMMAND="fd . --type f $FD_OPTIONS"
export FZF_DEFAULT_OPTS="--height 100% --layout=reverse --inline-info"

# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# export FZF_CTRL_T_OPTS="--preview '(highlight -t 4 -I -l -O ansi {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -500'"
export FZF_CTRL_T_OPTS="--preview 'bat --style=numbers --color=always --line-range :500 {}'"

# To apply the command to ALT-C as well
export FZF_ALT_C_COMMAND="fd . --type d $FD_OPTIONS"
# export FZF_ALT_C_OPTS=""

load_source "${HOME}/.fzf.$SHELL_NAME"

################################################################################
# Z (easy jump into directory)
################################################################################
# load_source "$(brew --prefix)/etc/profile.d/z.sh"

################################################################################
# zoxide - A smarter cd command (https://github.com/ajeetdsouza/zoxide)
################################################################################
if cmd_exists zoxide; then
	case $SHELL_NAME in
	bash) eval "$(zoxide init --cmd j bash)" ;;
	zsh) eval "$(zoxide init --cmd j zsh)" ;;
	esac
fi

################################################################################
# Github CLI
################################################################################
if cmd_exists gh; then
	case $SHELL_NAME in
	bash) source <(gh completion --shell bash) ;;
	zsh) source <(gh completion --shell zsh) ;;
	esac
fi

################################################################################
# WezTerm
################################################################################
if cmd_exists wezterm; then
	case $SHELL_NAME in
	bash) source <(wezterm shell-completion --shell bash) ;;
	zsh) source <(wezterm shell-completion --shell zsh) ;;
	esac
fi

################################################################################
# Golang Delve
################################################################################
if cmd_exists dlv; then
	case $SHELL_NAME in
	bash) source <(dlv completion bash) ;;
	zsh) source <(dlv completion zsh) ;;
	esac
fi

################################################################################
# Docker
## brew install docker-completion docker-compose-completion
################################################################################

################################################################################
# Kubernetes
################################################################################
# if cmd_exists minikube; then
# 	case $SHELL_NAME in
# 		bash) source <(minikube completion bash);;
# 		zsh) source <(minikube completion zsh);;
# 	esac
# fi

# if cmd_exists kubectl; then
# 	case $SHELL_NAME in
# 		bash) source <(kubectl completion bash);;
# 		zsh) source <(kubectl completion zsh);;
# 	esac
# fi

################################################################################
# Google Cloud Platform
################################################################################
# The next line updates PATH for the Google Cloud SDK.
load_source "/Users/guntur/Env/google-cloud-sdk/path.$SHELL_NAME.inc"

# The next line enables shell command completion for gcloud.
load_source "/Users/guntur/Env/google-cloud-sdk/completion.$SHELL_NAME.inc"

################################################################################
# Cobra for Build CLI using Go
################################################################################
if cmd_exists cobra; then
	case $SHELL_NAME in
	bash)
		if [ ! -f "/usr/local/etc/bash_completion.d/cobra" ]; then
			cobra completion bash >/usr/local/etc/bash_completion.d/cobra
		fi
		;;
	zsh)
		if [ ! -f "/usr/local/share/zsh/site-functions/_cobra" ]; then
			cobra completion zsh >/usr/local/share/zsh/site-functions/_cobra
			exec $(which zsh) -l
		fi
		;;
	esac
fi

################################################################################
## atuin
################################################################################
case "$SHELL_NAME" in
bash)
	[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
	eval "$(atuin init bash --disable-up-arrow)"
	;;
zsh)
	eval "$(atuin init zsh --disable-up-arrow)"
	;;
esac

################################################################################
# Broot - tree directory visualization
################################################################################
# load_source "$HOME/.config/broot/launcher/bash/br"

################################################################################
# Heroku - autocomplete setup
################################################################################
# if [ $SHELL_NAME = "zsh" ]; then
# 	HEROKU_AC_ZSH_SETUP_PATH=$HOME/.cache/heroku/autocomplete/zsh_setup
# 	load_source $HEROKU_AC_ZSH_SETUP_PATH
# fi

################################################################################
# Powerline Fonts
################################################################################
# if [ $SHELL_NAME = "zsh" ]; then
# 	load_source "/usr/share/zsh/site-contrib/powerline.zsh"
# fi

################################################################################
# Dropbox
################################################################################
# export PATH="$PATH:$HOME/.dropbox-bin"

################################################################################
# iTerm7 Shell Integration
################################################################################
# test -e "${HOME}/.iterm7_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

################################################################################
# ngrok
################################################################################
# if cmd_exists ngrok; then
# 	case $SHELL_NAME in
# 	zsh)
# 		source <(ngrok completion)
# 		;;
# 	esac
# fi

################################################################################
# mockery
################################################################################
if cmd_exists mockery; then
	case $SHELL_NAME in
	bash) source <(mockery completion bash) ;;
	zsh) source <(mockery completion zsh) ;;
	esac
fi

################################################################################
# sqlc
################################################################################
if cmd_exists sqlc; then
	case $SHELL_NAME in
	bash) source <(sqlc completion bash) ;;
	zsh) source <(sqlc completion zsh) ;;
	esac
fi
