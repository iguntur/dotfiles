#!/bin/bash

##
## Terminal color
##

# if test -t 1; then # if terminal
# 	ncolors=$(which tput > /dev/null && tput colors) # supports color
# 	if test -n "$ncolors" && test $ncolors -ge 8; then
# 		termcols=$(tput cols)
# 		bold="$(tput bold)"
# 		underline="$(tput smul)"
# 		standout="$(tput smso)"
# 		normal="$(tput sgr0)"
# 		black="$(tput setaf 0)"
# 		red="$(tput setaf 1)"
# 		green="$(tput setaf 2)"
# 		yellow="$(tput setaf 3)"
# 		blue="$(tput setaf 4)"
# 		magenta="$(tput setaf 5)"
# 		cyan="$(tput setaf 6)"
# 		white="$(tput setaf 7)"
# 	fi
# fi

##
## Utils !!!
##

##
## Sourcing file if it exists
##
source_if_exists() {
	source_file=$1

	if [ -f "$source_file" ]; then
		shift
		source $source_file
	fi
}

##
## Trim Whitespace
##
trim() {
	sed -e 's/^[[:space:]]*//' "$@"
}

##
## Download file using Curl
##
download_file() {
	if cmd_exists curl; then
		curl -L -O -C - "$@"
	else
		echo "curl not found"
		exit 1
	fi
}

## Open
# open () {
# 	if cmd_exists xdg-open; then
# 		xdg-open "$@";
# 	else
# 		echo "xdg-open not available";
# 	fi
# }

##
## make directorie
##
mkd() {
	mkdir -p "$@"
}

##
## make directorie and enter it
##
mkcd() {
	mkdir -p "$@" && cd "$@"
}

##
## find shorthand
##
f() {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

##
## List all files, long format, colorized, permissions in octal
##
lla() {
	ls -l "$@" | awk '
	{
	  k=0;
	  for (i=0;i<=8;i++)
		k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
	  if (k)
		printf("%0o ",k);
	  printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
	}'
}

##
## Copy w/ progress
##
cp_p() {
	rsync -WavP --human-readable --progress $1 $2
}

##
## whois a domain or a URL
##
whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ]; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
	# this is the best whois server
	# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

##
## tree directorie
##
# tree () {
# 	if [ -z "$1" ]; then
# 		/usr/bin/tree --dirsfirst -L 1 "$@"
# 	else
# 		/usr/bin/tree --dirsfirst "$@"
# 	fi
# }

pip_install_save() {
	package_name=$1
	requirements_file=$2

	if [[ -z $requirements_file ]]; then
		requirements_file='./requirements.txt'
	fi

	pip install $package_name && pip freeze | grep -i $package_name >>$requirements_file
}

mtmp() {
	if [ "$OS_PLATFORM" = "darwin" ]; then
		mkdir -p "$TMPDIR/$(openssl rand -hex 12)" && cd $_
	elif [ "$OS_PLATFORM" = "linux" ]; then
		mkdir -p /tmp/$(openssl rand -hex 12) && cd $_
	fi
}

ltmp() {
	mkdir -p "$HOME/.tmp/$(openssl rand -hex 12)" && cd $_
}

##
## TMUX
##
tns() {
	if [ "$1" = "-s" ]; then
		tmux new "$@"
	else
		sessionName=$(basename "$(pwd)")
		tmux new -s $sessionName "$@"
	fi
}

##
## Open file in current git status using Neovim
##
vg() {
	if git rev-parse --git-dir >/dev/null 2>&1; then
		selectedFile=$(git status --porcelain --untracked-files=all | sed /^.D/d | sed s/...// | fzf --height 100% --preview 'bat --style=numbers --color=always --line-range :500 {}')
		([ ! -z "$selectedFile" ] && nvim $selectedFile) || return 0
	else
		git rev-parse --git-dir
	fi
}

##
## Open the file from the given directory or fallback from the current directorie
##
vf() {
	filepath=$(fd . --type f "$@" | fzf --height 100% --info inline --preview 'bat --style=numbers --color=always --line-range :900 {}')

	if [ ! -z "$filepath" ]; then
		nvim $filepath
	fi
}

##
## Open dotfiles configurations
##
vd() {
	filepath=$(fd . --type f ~/.dotfiles | fzf --height 100% --info inline --preview 'bat --style=numbers --color=always --line-range :900 {}')

	if [ ! -z "$filepath" ]; then
		nvim --cmd 'cd $HOME/.dotfiles' $filepath
	fi
}

##
## Open neovim configurations
##
vn() {
	filepath=$(fd . --type f ~/.config/nvim | fzf --height 100% --info inline --preview 'bat --style=numbers --color=always --line-range :900 {}')

	if [ ! -z "$filepath" ]; then
		nvim --cmd 'cd $HOME/.config/nvim' $filepath
	fi
}

##
## Show Keyboard Keysym
##
keys() {
	## Docs: https://wiki.archlinux.org/index.php/Keyboard_input#Identifying_keycodes
	xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}

fileperms() {
	stat -c '%a - %n' "$@"
}

##
## Quick cd into directory
##
fcd() {
	if [ -z "$1" ]; then
		fp="$(fd . --type d "$HOME" | fzf)"
	else
		fp="$(fd . --type d "$@" | fzf)"
	fi

	if [ ! -z "$fp" ]; then
		cd $fp
	fi
}
