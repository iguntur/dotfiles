#!/bin/bash

##
## Terminal color
##

if test -t 1; then # if terminal
	ncolors=$(which tput > /dev/null && tput colors) # supports color
	if test -n "$ncolors" && test $ncolors -ge 8; then
		termcols=$(tput cols)
		bold="$(tput bold)"
		underline="$(tput smul)"
		standout="$(tput smso)"
		normal="$(tput sgr0)"
		black="$(tput setaf 0)"
		red="$(tput setaf 1)"
		green="$(tput setaf 2)"
		yellow="$(tput setaf 3)"
		blue="$(tput setaf 4)"
		magenta="$(tput setaf 5)"
		cyan="$(tput setaf 6)"
		white="$(tput setaf 7)"
	fi
fi

##
## Utils !!!
##


##
## Check command exist
##
cmd_exists() {
	command -v "$1" > /dev/null 2>&1;
}


## Open
open() {
	if cmd_exists xdg-open; then
		xdg-open "$@";
	else
		echo "xdg-open not available";
	fi
}

##
## make directorie
##
mkd () {
	mkdir -p "$@"
}

##
## make directorie and enter it
##
mkcd () {
	mkdir -p "$@" && cd "$@"
}

##
## find shorthand
##
f () {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

##
## List all files, long format, colorized, permissions in octal
##
lla () {
	ls -l  "$@" | awk '
	{
	  k=0;
	  for (i=0;i<=8;i++)
		k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
	  if (k)
		printf("%0o ",k);
	  printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
	}'
}

##
## Copy w/ progress
##
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}

##
## whois a domain or a URL
##
whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
	# this is the best whois server
	# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

##
## tree directorie
##
tree () {
	if [ -z "$1" ]; then
		/usr/bin/tree --dirsfirst -L 1 "$@"
	else
		/usr/bin/tree --dirsfirst "$@"
	fi
}


lx () {
	if cmd_exists exa; then
		exa -Tgalh \
			--git \
			--git-ignore \
			--ignore-glob .git \
			--group-directories-first \
			-L 1 \
			"$@"
	else
		echo "exa command not found"
	fi
}

pip_install_save() {
	package_name=$1
	requirements_file=$2

	if [[ -z $requirements_file ]]; then
		requirements_file='./requirements.txt'
	fi

	pip install $package_name && pip freeze | grep -i $package_name >> $requirements_file
}

# Stop all docker container
# Remove all docker container, volume, network
ddd_docker() {
	echo "Stop container $(docker ps -aq)"
	echo "docker container stop $(docker ps -aq)"
	docker container stop $(docker ps -aq) > /dev/null 2>&1 &&

	echo

	echo "docker container prune --force"
	docker container prune --force &&

	echo "docker network prune --force"
	docker network prune --force &&

	echo "docker volume prune --force"
	docker volume prune --force

	echo "Done"
}

mtmp() {
	mkdir -p /tmp/$(openssl rand -hex 12) && cd $_
}

